// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: shuffleInfo.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_shuffleInfo_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_shuffleInfo_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_shuffleInfo_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_shuffleInfo_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_shuffleInfo_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_shuffleInfo_2eproto_metadata_getter(int index);
namespace ShuffleInfo {
class ReorderInfo;
struct ReorderInfoDefaultTypeInternal;
extern ReorderInfoDefaultTypeInternal _ReorderInfo_default_instance_;
class ReorderInfo_BinaryInfo;
struct ReorderInfo_BinaryInfoDefaultTypeInternal;
extern ReorderInfo_BinaryInfoDefaultTypeInternal _ReorderInfo_BinaryInfo_default_instance_;
class ReorderInfo_FixupInfo;
struct ReorderInfo_FixupInfoDefaultTypeInternal;
extern ReorderInfo_FixupInfoDefaultTypeInternal _ReorderInfo_FixupInfo_default_instance_;
class ReorderInfo_FixupInfo_FixupTuple;
struct ReorderInfo_FixupInfo_FixupTupleDefaultTypeInternal;
extern ReorderInfo_FixupInfo_FixupTupleDefaultTypeInternal _ReorderInfo_FixupInfo_FixupTuple_default_instance_;
class ReorderInfo_FunctionInfo;
struct ReorderInfo_FunctionInfoDefaultTypeInternal;
extern ReorderInfo_FunctionInfoDefaultTypeInternal _ReorderInfo_FunctionInfo_default_instance_;
class ReorderInfo_LayoutInfo;
struct ReorderInfo_LayoutInfoDefaultTypeInternal;
extern ReorderInfo_LayoutInfoDefaultTypeInternal _ReorderInfo_LayoutInfo_default_instance_;
class ReorderInfo_SourceInfo;
struct ReorderInfo_SourceInfoDefaultTypeInternal;
extern ReorderInfo_SourceInfoDefaultTypeInternal _ReorderInfo_SourceInfo_default_instance_;
}  // namespace ShuffleInfo
PROTOBUF_NAMESPACE_OPEN
template<> ::ShuffleInfo::ReorderInfo* Arena::CreateMaybeMessage<::ShuffleInfo::ReorderInfo>(Arena*);
template<> ::ShuffleInfo::ReorderInfo_BinaryInfo* Arena::CreateMaybeMessage<::ShuffleInfo::ReorderInfo_BinaryInfo>(Arena*);
template<> ::ShuffleInfo::ReorderInfo_FixupInfo* Arena::CreateMaybeMessage<::ShuffleInfo::ReorderInfo_FixupInfo>(Arena*);
template<> ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* Arena::CreateMaybeMessage<::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple>(Arena*);
template<> ::ShuffleInfo::ReorderInfo_FunctionInfo* Arena::CreateMaybeMessage<::ShuffleInfo::ReorderInfo_FunctionInfo>(Arena*);
template<> ::ShuffleInfo::ReorderInfo_LayoutInfo* Arena::CreateMaybeMessage<::ShuffleInfo::ReorderInfo_LayoutInfo>(Arena*);
template<> ::ShuffleInfo::ReorderInfo_SourceInfo* Arena::CreateMaybeMessage<::ShuffleInfo::ReorderInfo_SourceInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ShuffleInfo {

// ===================================================================

class ReorderInfo_BinaryInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ShuffleInfo.ReorderInfo.BinaryInfo) */ {
 public:
  inline ReorderInfo_BinaryInfo() : ReorderInfo_BinaryInfo(nullptr) {}
  virtual ~ReorderInfo_BinaryInfo();
  explicit constexpr ReorderInfo_BinaryInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReorderInfo_BinaryInfo(const ReorderInfo_BinaryInfo& from);
  ReorderInfo_BinaryInfo(ReorderInfo_BinaryInfo&& from) noexcept
    : ReorderInfo_BinaryInfo() {
    *this = ::std::move(from);
  }

  inline ReorderInfo_BinaryInfo& operator=(const ReorderInfo_BinaryInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReorderInfo_BinaryInfo& operator=(ReorderInfo_BinaryInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReorderInfo_BinaryInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReorderInfo_BinaryInfo* internal_default_instance() {
    return reinterpret_cast<const ReorderInfo_BinaryInfo*>(
               &_ReorderInfo_BinaryInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ReorderInfo_BinaryInfo& a, ReorderInfo_BinaryInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ReorderInfo_BinaryInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReorderInfo_BinaryInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReorderInfo_BinaryInfo* New() const final {
    return CreateMaybeMessage<ReorderInfo_BinaryInfo>(nullptr);
  }

  ReorderInfo_BinaryInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReorderInfo_BinaryInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReorderInfo_BinaryInfo& from);
  void MergeFrom(const ReorderInfo_BinaryInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReorderInfo_BinaryInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ShuffleInfo.ReorderInfo.BinaryInfo";
  }
  protected:
  explicit ReorderInfo_BinaryInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_shuffleInfo_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRandObjOffsetFieldNumber = 1,
    kMainAddrOffsetFieldNumber = 2,
    kObjSzFieldNumber = 3,
    kSrcTypeFieldNumber = 4,
  };
  // optional uint32 rand_obj_offset = 1;
  bool has_rand_obj_offset() const;
  private:
  bool _internal_has_rand_obj_offset() const;
  public:
  void clear_rand_obj_offset();
  ::PROTOBUF_NAMESPACE_ID::uint32 rand_obj_offset() const;
  void set_rand_obj_offset(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rand_obj_offset() const;
  void _internal_set_rand_obj_offset(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 main_addr_offset = 2;
  bool has_main_addr_offset() const;
  private:
  bool _internal_has_main_addr_offset() const;
  public:
  void clear_main_addr_offset();
  ::PROTOBUF_NAMESPACE_ID::uint32 main_addr_offset() const;
  void set_main_addr_offset(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_main_addr_offset() const;
  void _internal_set_main_addr_offset(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 obj_sz = 3;
  bool has_obj_sz() const;
  private:
  bool _internal_has_obj_sz() const;
  public:
  void clear_obj_sz();
  ::PROTOBUF_NAMESPACE_ID::uint32 obj_sz() const;
  void set_obj_sz(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_obj_sz() const;
  void _internal_set_obj_sz(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 src_type = 4;
  bool has_src_type() const;
  private:
  bool _internal_has_src_type() const;
  public:
  void clear_src_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 src_type() const;
  void set_src_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_src_type() const;
  void _internal_set_src_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:ShuffleInfo.ReorderInfo.BinaryInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rand_obj_offset_;
  ::PROTOBUF_NAMESPACE_ID::uint32 main_addr_offset_;
  ::PROTOBUF_NAMESPACE_ID::uint32 obj_sz_;
  ::PROTOBUF_NAMESPACE_ID::uint32 src_type_;
  friend struct ::TableStruct_shuffleInfo_2eproto;
};
// -------------------------------------------------------------------

class ReorderInfo_LayoutInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ShuffleInfo.ReorderInfo.LayoutInfo) */ {
 public:
  inline ReorderInfo_LayoutInfo() : ReorderInfo_LayoutInfo(nullptr) {}
  virtual ~ReorderInfo_LayoutInfo();
  explicit constexpr ReorderInfo_LayoutInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReorderInfo_LayoutInfo(const ReorderInfo_LayoutInfo& from);
  ReorderInfo_LayoutInfo(ReorderInfo_LayoutInfo&& from) noexcept
    : ReorderInfo_LayoutInfo() {
    *this = ::std::move(from);
  }

  inline ReorderInfo_LayoutInfo& operator=(const ReorderInfo_LayoutInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReorderInfo_LayoutInfo& operator=(ReorderInfo_LayoutInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReorderInfo_LayoutInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReorderInfo_LayoutInfo* internal_default_instance() {
    return reinterpret_cast<const ReorderInfo_LayoutInfo*>(
               &_ReorderInfo_LayoutInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ReorderInfo_LayoutInfo& a, ReorderInfo_LayoutInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ReorderInfo_LayoutInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReorderInfo_LayoutInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReorderInfo_LayoutInfo* New() const final {
    return CreateMaybeMessage<ReorderInfo_LayoutInfo>(nullptr);
  }

  ReorderInfo_LayoutInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReorderInfo_LayoutInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReorderInfo_LayoutInfo& from);
  void MergeFrom(const ReorderInfo_LayoutInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReorderInfo_LayoutInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ShuffleInfo.ReorderInfo.LayoutInfo";
  }
  protected:
  explicit ReorderInfo_LayoutInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_shuffleInfo_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccsFieldNumber = 11,
    kPredsFieldNumber = 12,
    kSectionNameFieldNumber = 5,
    kBbIdFieldNumber = 10,
    kBbSizeFieldNumber = 1,
    kTypeFieldNumber = 2,
    kNumFixupsFieldNumber = 3,
    kBbFallthroughFieldNumber = 4,
    kOffsetFieldNumber = 6,
    kPaddingSizeFieldNumber = 7,
    kAssembleTypeFieldNumber = 8,
    kNargsFieldNumber = 9,
  };
  // repeated string succs = 11;
  int succs_size() const;
  private:
  int _internal_succs_size() const;
  public:
  void clear_succs();
  const std::string& succs(int index) const;
  std::string* mutable_succs(int index);
  void set_succs(int index, const std::string& value);
  void set_succs(int index, std::string&& value);
  void set_succs(int index, const char* value);
  void set_succs(int index, const char* value, size_t size);
  std::string* add_succs();
  void add_succs(const std::string& value);
  void add_succs(std::string&& value);
  void add_succs(const char* value);
  void add_succs(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& succs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_succs();
  private:
  const std::string& _internal_succs(int index) const;
  std::string* _internal_add_succs();
  public:

  // repeated string preds = 12;
  int preds_size() const;
  private:
  int _internal_preds_size() const;
  public:
  void clear_preds();
  const std::string& preds(int index) const;
  std::string* mutable_preds(int index);
  void set_preds(int index, const std::string& value);
  void set_preds(int index, std::string&& value);
  void set_preds(int index, const char* value);
  void set_preds(int index, const char* value, size_t size);
  std::string* add_preds();
  void add_preds(const std::string& value);
  void add_preds(std::string&& value);
  void add_preds(const char* value);
  void add_preds(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& preds() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_preds();
  private:
  const std::string& _internal_preds(int index) const;
  std::string* _internal_add_preds();
  public:

  // optional string section_name = 5;
  bool has_section_name() const;
  private:
  bool _internal_has_section_name() const;
  public:
  void clear_section_name();
  const std::string& section_name() const;
  void set_section_name(const std::string& value);
  void set_section_name(std::string&& value);
  void set_section_name(const char* value);
  void set_section_name(const char* value, size_t size);
  std::string* mutable_section_name();
  std::string* release_section_name();
  void set_allocated_section_name(std::string* section_name);
  private:
  const std::string& _internal_section_name() const;
  void _internal_set_section_name(const std::string& value);
  std::string* _internal_mutable_section_name();
  public:

  // optional string bb_id = 10;
  bool has_bb_id() const;
  private:
  bool _internal_has_bb_id() const;
  public:
  void clear_bb_id();
  const std::string& bb_id() const;
  void set_bb_id(const std::string& value);
  void set_bb_id(std::string&& value);
  void set_bb_id(const char* value);
  void set_bb_id(const char* value, size_t size);
  std::string* mutable_bb_id();
  std::string* release_bb_id();
  void set_allocated_bb_id(std::string* bb_id);
  private:
  const std::string& _internal_bb_id() const;
  void _internal_set_bb_id(const std::string& value);
  std::string* _internal_mutable_bb_id();
  public:

  // optional uint64 bb_size = 1;
  bool has_bb_size() const;
  private:
  bool _internal_has_bb_size() const;
  public:
  void clear_bb_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 bb_size() const;
  void set_bb_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_bb_size() const;
  void _internal_set_bb_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 type = 2;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::uint64 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 num_fixups = 3;
  bool has_num_fixups() const;
  private:
  bool _internal_has_num_fixups() const;
  public:
  void clear_num_fixups();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_fixups() const;
  void set_num_fixups(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_fixups() const;
  void _internal_set_num_fixups(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool bb_fallthrough = 4;
  bool has_bb_fallthrough() const;
  private:
  bool _internal_has_bb_fallthrough() const;
  public:
  void clear_bb_fallthrough();
  bool bb_fallthrough() const;
  void set_bb_fallthrough(bool value);
  private:
  bool _internal_bb_fallthrough() const;
  void _internal_set_bb_fallthrough(bool value);
  public:

  // optional uint64 offset = 6;
  bool has_offset() const;
  private:
  bool _internal_has_offset() const;
  public:
  void clear_offset();
  ::PROTOBUF_NAMESPACE_ID::uint64 offset() const;
  void set_offset(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_offset() const;
  void _internal_set_offset(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 padding_size = 7;
  bool has_padding_size() const;
  private:
  bool _internal_has_padding_size() const;
  public:
  void clear_padding_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 padding_size() const;
  void set_padding_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_padding_size() const;
  void _internal_set_padding_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 assemble_type = 8 [default = 0];
  bool has_assemble_type() const;
  private:
  bool _internal_has_assemble_type() const;
  public:
  void clear_assemble_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 assemble_type() const;
  void set_assemble_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_assemble_type() const;
  void _internal_set_assemble_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 nargs = 9;
  bool has_nargs() const;
  private:
  bool _internal_has_nargs() const;
  public:
  void clear_nargs();
  ::PROTOBUF_NAMESPACE_ID::uint32 nargs() const;
  void set_nargs(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_nargs() const;
  void _internal_set_nargs(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:ShuffleInfo.ReorderInfo.LayoutInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> succs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> preds_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr section_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bb_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 bb_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_fixups_;
  bool bb_fallthrough_;
  ::PROTOBUF_NAMESPACE_ID::uint64 offset_;
  ::PROTOBUF_NAMESPACE_ID::uint32 padding_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 assemble_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 nargs_;
  friend struct ::TableStruct_shuffleInfo_2eproto;
};
// -------------------------------------------------------------------

class ReorderInfo_FunctionInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ShuffleInfo.ReorderInfo.FunctionInfo) */ {
 public:
  inline ReorderInfo_FunctionInfo() : ReorderInfo_FunctionInfo(nullptr) {}
  virtual ~ReorderInfo_FunctionInfo();
  explicit constexpr ReorderInfo_FunctionInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReorderInfo_FunctionInfo(const ReorderInfo_FunctionInfo& from);
  ReorderInfo_FunctionInfo(ReorderInfo_FunctionInfo&& from) noexcept
    : ReorderInfo_FunctionInfo() {
    *this = ::std::move(from);
  }

  inline ReorderInfo_FunctionInfo& operator=(const ReorderInfo_FunctionInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReorderInfo_FunctionInfo& operator=(ReorderInfo_FunctionInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReorderInfo_FunctionInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReorderInfo_FunctionInfo* internal_default_instance() {
    return reinterpret_cast<const ReorderInfo_FunctionInfo*>(
               &_ReorderInfo_FunctionInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ReorderInfo_FunctionInfo& a, ReorderInfo_FunctionInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ReorderInfo_FunctionInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReorderInfo_FunctionInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReorderInfo_FunctionInfo* New() const final {
    return CreateMaybeMessage<ReorderInfo_FunctionInfo>(nullptr);
  }

  ReorderInfo_FunctionInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReorderInfo_FunctionInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReorderInfo_FunctionInfo& from);
  void MergeFrom(const ReorderInfo_FunctionInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReorderInfo_FunctionInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ShuffleInfo.ReorderInfo.FunctionInfo";
  }
  protected:
  explicit ReorderInfo_FunctionInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_shuffleInfo_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFIdFieldNumber = 1,
    kFNameFieldNumber = 2,
    kBbNumFieldNumber = 3,
  };
  // optional string f_id = 1;
  bool has_f_id() const;
  private:
  bool _internal_has_f_id() const;
  public:
  void clear_f_id();
  const std::string& f_id() const;
  void set_f_id(const std::string& value);
  void set_f_id(std::string&& value);
  void set_f_id(const char* value);
  void set_f_id(const char* value, size_t size);
  std::string* mutable_f_id();
  std::string* release_f_id();
  void set_allocated_f_id(std::string* f_id);
  private:
  const std::string& _internal_f_id() const;
  void _internal_set_f_id(const std::string& value);
  std::string* _internal_mutable_f_id();
  public:

  // optional string f_name = 2;
  bool has_f_name() const;
  private:
  bool _internal_has_f_name() const;
  public:
  void clear_f_name();
  const std::string& f_name() const;
  void set_f_name(const std::string& value);
  void set_f_name(std::string&& value);
  void set_f_name(const char* value);
  void set_f_name(const char* value, size_t size);
  std::string* mutable_f_name();
  std::string* release_f_name();
  void set_allocated_f_name(std::string* f_name);
  private:
  const std::string& _internal_f_name() const;
  void _internal_set_f_name(const std::string& value);
  std::string* _internal_mutable_f_name();
  public:

  // optional uint64 bb_num = 3;
  bool has_bb_num() const;
  private:
  bool _internal_has_bb_num() const;
  public:
  void clear_bb_num();
  ::PROTOBUF_NAMESPACE_ID::uint64 bb_num() const;
  void set_bb_num(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_bb_num() const;
  void _internal_set_bb_num(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:ShuffleInfo.ReorderInfo.FunctionInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f_name_;
  ::PROTOBUF_NAMESPACE_ID::uint64 bb_num_;
  friend struct ::TableStruct_shuffleInfo_2eproto;
};
// -------------------------------------------------------------------

class ReorderInfo_FixupInfo_FixupTuple PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple) */ {
 public:
  inline ReorderInfo_FixupInfo_FixupTuple() : ReorderInfo_FixupInfo_FixupTuple(nullptr) {}
  virtual ~ReorderInfo_FixupInfo_FixupTuple();
  explicit constexpr ReorderInfo_FixupInfo_FixupTuple(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReorderInfo_FixupInfo_FixupTuple(const ReorderInfo_FixupInfo_FixupTuple& from);
  ReorderInfo_FixupInfo_FixupTuple(ReorderInfo_FixupInfo_FixupTuple&& from) noexcept
    : ReorderInfo_FixupInfo_FixupTuple() {
    *this = ::std::move(from);
  }

  inline ReorderInfo_FixupInfo_FixupTuple& operator=(const ReorderInfo_FixupInfo_FixupTuple& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReorderInfo_FixupInfo_FixupTuple& operator=(ReorderInfo_FixupInfo_FixupTuple&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReorderInfo_FixupInfo_FixupTuple& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReorderInfo_FixupInfo_FixupTuple* internal_default_instance() {
    return reinterpret_cast<const ReorderInfo_FixupInfo_FixupTuple*>(
               &_ReorderInfo_FixupInfo_FixupTuple_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ReorderInfo_FixupInfo_FixupTuple& a, ReorderInfo_FixupInfo_FixupTuple& b) {
    a.Swap(&b);
  }
  inline void Swap(ReorderInfo_FixupInfo_FixupTuple* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReorderInfo_FixupInfo_FixupTuple* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReorderInfo_FixupInfo_FixupTuple* New() const final {
    return CreateMaybeMessage<ReorderInfo_FixupInfo_FixupTuple>(nullptr);
  }

  ReorderInfo_FixupInfo_FixupTuple* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReorderInfo_FixupInfo_FixupTuple>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReorderInfo_FixupInfo_FixupTuple& from);
  void MergeFrom(const ReorderInfo_FixupInfo_FixupTuple& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReorderInfo_FixupInfo_FixupTuple* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple";
  }
  protected:
  explicit ReorderInfo_FixupInfo_FixupTuple(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_shuffleInfo_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSectionNameFieldNumber = 5,
    kOffsetFieldNumber = 1,
    kDerefSzFieldNumber = 2,
    kIsRelaFieldNumber = 3,
    kTypeFieldNumber = 4,
    kNumJtEntriesFieldNumber = 6,
    kJtEntrySzFieldNumber = 7,
  };
  // optional string section_name = 5;
  bool has_section_name() const;
  private:
  bool _internal_has_section_name() const;
  public:
  void clear_section_name();
  const std::string& section_name() const;
  void set_section_name(const std::string& value);
  void set_section_name(std::string&& value);
  void set_section_name(const char* value);
  void set_section_name(const char* value, size_t size);
  std::string* mutable_section_name();
  std::string* release_section_name();
  void set_allocated_section_name(std::string* section_name);
  private:
  const std::string& _internal_section_name() const;
  void _internal_set_section_name(const std::string& value);
  std::string* _internal_mutable_section_name();
  public:

  // required uint32 offset = 1;
  bool has_offset() const;
  private:
  bool _internal_has_offset() const;
  public:
  void clear_offset();
  ::PROTOBUF_NAMESPACE_ID::uint32 offset() const;
  void set_offset(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_offset() const;
  void _internal_set_offset(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 deref_sz = 2;
  bool has_deref_sz() const;
  private:
  bool _internal_has_deref_sz() const;
  public:
  void clear_deref_sz();
  ::PROTOBUF_NAMESPACE_ID::uint32 deref_sz() const;
  void set_deref_sz(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_deref_sz() const;
  void _internal_set_deref_sz(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required bool is_rela = 3;
  bool has_is_rela() const;
  private:
  bool _internal_has_is_rela() const;
  public:
  void clear_is_rela();
  bool is_rela() const;
  void set_is_rela(bool value);
  private:
  bool _internal_is_rela() const;
  void _internal_set_is_rela(bool value);
  public:

  // optional uint32 type = 4;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 num_jt_entries = 6;
  bool has_num_jt_entries() const;
  private:
  bool _internal_has_num_jt_entries() const;
  public:
  void clear_num_jt_entries();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_jt_entries() const;
  void set_num_jt_entries(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_jt_entries() const;
  void _internal_set_num_jt_entries(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 jt_entry_sz = 7;
  bool has_jt_entry_sz() const;
  private:
  bool _internal_has_jt_entry_sz() const;
  public:
  void clear_jt_entry_sz();
  ::PROTOBUF_NAMESPACE_ID::uint32 jt_entry_sz() const;
  void set_jt_entry_sz(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_jt_entry_sz() const;
  void _internal_set_jt_entry_sz(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr section_name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 offset_;
  ::PROTOBUF_NAMESPACE_ID::uint32 deref_sz_;
  bool is_rela_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_jt_entries_;
  ::PROTOBUF_NAMESPACE_ID::uint32 jt_entry_sz_;
  friend struct ::TableStruct_shuffleInfo_2eproto;
};
// -------------------------------------------------------------------

class ReorderInfo_FixupInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ShuffleInfo.ReorderInfo.FixupInfo) */ {
 public:
  inline ReorderInfo_FixupInfo() : ReorderInfo_FixupInfo(nullptr) {}
  virtual ~ReorderInfo_FixupInfo();
  explicit constexpr ReorderInfo_FixupInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReorderInfo_FixupInfo(const ReorderInfo_FixupInfo& from);
  ReorderInfo_FixupInfo(ReorderInfo_FixupInfo&& from) noexcept
    : ReorderInfo_FixupInfo() {
    *this = ::std::move(from);
  }

  inline ReorderInfo_FixupInfo& operator=(const ReorderInfo_FixupInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReorderInfo_FixupInfo& operator=(ReorderInfo_FixupInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReorderInfo_FixupInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReorderInfo_FixupInfo* internal_default_instance() {
    return reinterpret_cast<const ReorderInfo_FixupInfo*>(
               &_ReorderInfo_FixupInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ReorderInfo_FixupInfo& a, ReorderInfo_FixupInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ReorderInfo_FixupInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReorderInfo_FixupInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReorderInfo_FixupInfo* New() const final {
    return CreateMaybeMessage<ReorderInfo_FixupInfo>(nullptr);
  }

  ReorderInfo_FixupInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReorderInfo_FixupInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReorderInfo_FixupInfo& from);
  void MergeFrom(const ReorderInfo_FixupInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReorderInfo_FixupInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ShuffleInfo.ReorderInfo.FixupInfo";
  }
  protected:
  explicit ReorderInfo_FixupInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_shuffleInfo_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef ReorderInfo_FixupInfo_FixupTuple FixupTuple;

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 1,
    kRodataFieldNumber = 2,
    kDataFieldNumber = 3,
    kDatarelFieldNumber = 4,
    kInitarrayFieldNumber = 5,
  };
  // repeated .ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple text = 1;
  int text_size() const;
  private:
  int _internal_text_size() const;
  public:
  void clear_text();
  ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* mutable_text(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple >*
      mutable_text();
  private:
  const ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple& _internal_text(int index) const;
  ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* _internal_add_text();
  public:
  const ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple& text(int index) const;
  ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* add_text();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple >&
      text() const;

  // repeated .ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple rodata = 2;
  int rodata_size() const;
  private:
  int _internal_rodata_size() const;
  public:
  void clear_rodata();
  ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* mutable_rodata(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple >*
      mutable_rodata();
  private:
  const ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple& _internal_rodata(int index) const;
  ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* _internal_add_rodata();
  public:
  const ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple& rodata(int index) const;
  ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* add_rodata();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple >&
      rodata() const;

  // repeated .ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple data = 3;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple >*
      mutable_data();
  private:
  const ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple& _internal_data(int index) const;
  ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* _internal_add_data();
  public:
  const ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple& data(int index) const;
  ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple >&
      data() const;

  // repeated .ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple datarel = 4;
  int datarel_size() const;
  private:
  int _internal_datarel_size() const;
  public:
  void clear_datarel();
  ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* mutable_datarel(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple >*
      mutable_datarel();
  private:
  const ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple& _internal_datarel(int index) const;
  ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* _internal_add_datarel();
  public:
  const ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple& datarel(int index) const;
  ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* add_datarel();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple >&
      datarel() const;

  // repeated .ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple initarray = 5;
  int initarray_size() const;
  private:
  int _internal_initarray_size() const;
  public:
  void clear_initarray();
  ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* mutable_initarray(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple >*
      mutable_initarray();
  private:
  const ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple& _internal_initarray(int index) const;
  ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* _internal_add_initarray();
  public:
  const ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple& initarray(int index) const;
  ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* add_initarray();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple >&
      initarray() const;

  // @@protoc_insertion_point(class_scope:ShuffleInfo.ReorderInfo.FixupInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple > text_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple > rodata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple > data_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple > datarel_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple > initarray_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_shuffleInfo_2eproto;
};
// -------------------------------------------------------------------

class ReorderInfo_SourceInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ShuffleInfo.ReorderInfo.SourceInfo) */ {
 public:
  inline ReorderInfo_SourceInfo() : ReorderInfo_SourceInfo(nullptr) {}
  virtual ~ReorderInfo_SourceInfo();
  explicit constexpr ReorderInfo_SourceInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReorderInfo_SourceInfo(const ReorderInfo_SourceInfo& from);
  ReorderInfo_SourceInfo(ReorderInfo_SourceInfo&& from) noexcept
    : ReorderInfo_SourceInfo() {
    *this = ::std::move(from);
  }

  inline ReorderInfo_SourceInfo& operator=(const ReorderInfo_SourceInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReorderInfo_SourceInfo& operator=(ReorderInfo_SourceInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReorderInfo_SourceInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReorderInfo_SourceInfo* internal_default_instance() {
    return reinterpret_cast<const ReorderInfo_SourceInfo*>(
               &_ReorderInfo_SourceInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ReorderInfo_SourceInfo& a, ReorderInfo_SourceInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ReorderInfo_SourceInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReorderInfo_SourceInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReorderInfo_SourceInfo* New() const final {
    return CreateMaybeMessage<ReorderInfo_SourceInfo>(nullptr);
  }

  ReorderInfo_SourceInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReorderInfo_SourceInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReorderInfo_SourceInfo& from);
  void MergeFrom(const ReorderInfo_SourceInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReorderInfo_SourceInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ShuffleInfo.ReorderInfo.SourceInfo";
  }
  protected:
  explicit ReorderInfo_SourceInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_shuffleInfo_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSrcTypeFieldNumber = 1,
  };
  // repeated uint32 src_type = 1;
  int src_type_size() const;
  private:
  int _internal_src_type_size() const;
  public:
  void clear_src_type();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_src_type(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_src_type() const;
  void _internal_add_src_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_src_type();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 src_type(int index) const;
  void set_src_type(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_src_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      src_type() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_src_type();

  // @@protoc_insertion_point(class_scope:ShuffleInfo.ReorderInfo.SourceInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > src_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_shuffleInfo_2eproto;
};
// -------------------------------------------------------------------

class ReorderInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ShuffleInfo.ReorderInfo) */ {
 public:
  inline ReorderInfo() : ReorderInfo(nullptr) {}
  virtual ~ReorderInfo();
  explicit constexpr ReorderInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReorderInfo(const ReorderInfo& from);
  ReorderInfo(ReorderInfo&& from) noexcept
    : ReorderInfo() {
    *this = ::std::move(from);
  }

  inline ReorderInfo& operator=(const ReorderInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReorderInfo& operator=(ReorderInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReorderInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReorderInfo* internal_default_instance() {
    return reinterpret_cast<const ReorderInfo*>(
               &_ReorderInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ReorderInfo& a, ReorderInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ReorderInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReorderInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReorderInfo* New() const final {
    return CreateMaybeMessage<ReorderInfo>(nullptr);
  }

  ReorderInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReorderInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReorderInfo& from);
  void MergeFrom(const ReorderInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReorderInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ShuffleInfo.ReorderInfo";
  }
  protected:
  explicit ReorderInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_shuffleInfo_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef ReorderInfo_BinaryInfo BinaryInfo;
  typedef ReorderInfo_LayoutInfo LayoutInfo;
  typedef ReorderInfo_FunctionInfo FunctionInfo;
  typedef ReorderInfo_FixupInfo FixupInfo;
  typedef ReorderInfo_SourceInfo SourceInfo;

  // accessors -------------------------------------------------------

  enum : int {
    kLayoutFieldNumber = 2,
    kFixupFieldNumber = 3,
    kFuncFieldNumber = 5,
    kBinFieldNumber = 1,
    kSourceFieldNumber = 4,
  };
  // repeated .ShuffleInfo.ReorderInfo.LayoutInfo layout = 2;
  int layout_size() const;
  private:
  int _internal_layout_size() const;
  public:
  void clear_layout();
  ::ShuffleInfo::ReorderInfo_LayoutInfo* mutable_layout(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_LayoutInfo >*
      mutable_layout();
  private:
  const ::ShuffleInfo::ReorderInfo_LayoutInfo& _internal_layout(int index) const;
  ::ShuffleInfo::ReorderInfo_LayoutInfo* _internal_add_layout();
  public:
  const ::ShuffleInfo::ReorderInfo_LayoutInfo& layout(int index) const;
  ::ShuffleInfo::ReorderInfo_LayoutInfo* add_layout();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_LayoutInfo >&
      layout() const;

  // repeated .ShuffleInfo.ReorderInfo.FixupInfo fixup = 3;
  int fixup_size() const;
  private:
  int _internal_fixup_size() const;
  public:
  void clear_fixup();
  ::ShuffleInfo::ReorderInfo_FixupInfo* mutable_fixup(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo >*
      mutable_fixup();
  private:
  const ::ShuffleInfo::ReorderInfo_FixupInfo& _internal_fixup(int index) const;
  ::ShuffleInfo::ReorderInfo_FixupInfo* _internal_add_fixup();
  public:
  const ::ShuffleInfo::ReorderInfo_FixupInfo& fixup(int index) const;
  ::ShuffleInfo::ReorderInfo_FixupInfo* add_fixup();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo >&
      fixup() const;

  // repeated .ShuffleInfo.ReorderInfo.FunctionInfo func = 5;
  int func_size() const;
  private:
  int _internal_func_size() const;
  public:
  void clear_func();
  ::ShuffleInfo::ReorderInfo_FunctionInfo* mutable_func(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FunctionInfo >*
      mutable_func();
  private:
  const ::ShuffleInfo::ReorderInfo_FunctionInfo& _internal_func(int index) const;
  ::ShuffleInfo::ReorderInfo_FunctionInfo* _internal_add_func();
  public:
  const ::ShuffleInfo::ReorderInfo_FunctionInfo& func(int index) const;
  ::ShuffleInfo::ReorderInfo_FunctionInfo* add_func();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FunctionInfo >&
      func() const;

  // optional .ShuffleInfo.ReorderInfo.BinaryInfo bin = 1;
  bool has_bin() const;
  private:
  bool _internal_has_bin() const;
  public:
  void clear_bin();
  const ::ShuffleInfo::ReorderInfo_BinaryInfo& bin() const;
  ::ShuffleInfo::ReorderInfo_BinaryInfo* release_bin();
  ::ShuffleInfo::ReorderInfo_BinaryInfo* mutable_bin();
  void set_allocated_bin(::ShuffleInfo::ReorderInfo_BinaryInfo* bin);
  private:
  const ::ShuffleInfo::ReorderInfo_BinaryInfo& _internal_bin() const;
  ::ShuffleInfo::ReorderInfo_BinaryInfo* _internal_mutable_bin();
  public:
  void unsafe_arena_set_allocated_bin(
      ::ShuffleInfo::ReorderInfo_BinaryInfo* bin);
  ::ShuffleInfo::ReorderInfo_BinaryInfo* unsafe_arena_release_bin();

  // optional .ShuffleInfo.ReorderInfo.SourceInfo source = 4;
  bool has_source() const;
  private:
  bool _internal_has_source() const;
  public:
  void clear_source();
  const ::ShuffleInfo::ReorderInfo_SourceInfo& source() const;
  ::ShuffleInfo::ReorderInfo_SourceInfo* release_source();
  ::ShuffleInfo::ReorderInfo_SourceInfo* mutable_source();
  void set_allocated_source(::ShuffleInfo::ReorderInfo_SourceInfo* source);
  private:
  const ::ShuffleInfo::ReorderInfo_SourceInfo& _internal_source() const;
  ::ShuffleInfo::ReorderInfo_SourceInfo* _internal_mutable_source();
  public:
  void unsafe_arena_set_allocated_source(
      ::ShuffleInfo::ReorderInfo_SourceInfo* source);
  ::ShuffleInfo::ReorderInfo_SourceInfo* unsafe_arena_release_source();

  // @@protoc_insertion_point(class_scope:ShuffleInfo.ReorderInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_LayoutInfo > layout_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo > fixup_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FunctionInfo > func_;
  ::ShuffleInfo::ReorderInfo_BinaryInfo* bin_;
  ::ShuffleInfo::ReorderInfo_SourceInfo* source_;
  friend struct ::TableStruct_shuffleInfo_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ReorderInfo_BinaryInfo

// optional uint32 rand_obj_offset = 1;
inline bool ReorderInfo_BinaryInfo::_internal_has_rand_obj_offset() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ReorderInfo_BinaryInfo::has_rand_obj_offset() const {
  return _internal_has_rand_obj_offset();
}
inline void ReorderInfo_BinaryInfo::clear_rand_obj_offset() {
  rand_obj_offset_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReorderInfo_BinaryInfo::_internal_rand_obj_offset() const {
  return rand_obj_offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReorderInfo_BinaryInfo::rand_obj_offset() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.BinaryInfo.rand_obj_offset)
  return _internal_rand_obj_offset();
}
inline void ReorderInfo_BinaryInfo::_internal_set_rand_obj_offset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  rand_obj_offset_ = value;
}
inline void ReorderInfo_BinaryInfo::set_rand_obj_offset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rand_obj_offset(value);
  // @@protoc_insertion_point(field_set:ShuffleInfo.ReorderInfo.BinaryInfo.rand_obj_offset)
}

// optional uint32 main_addr_offset = 2;
inline bool ReorderInfo_BinaryInfo::_internal_has_main_addr_offset() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ReorderInfo_BinaryInfo::has_main_addr_offset() const {
  return _internal_has_main_addr_offset();
}
inline void ReorderInfo_BinaryInfo::clear_main_addr_offset() {
  main_addr_offset_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReorderInfo_BinaryInfo::_internal_main_addr_offset() const {
  return main_addr_offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReorderInfo_BinaryInfo::main_addr_offset() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.BinaryInfo.main_addr_offset)
  return _internal_main_addr_offset();
}
inline void ReorderInfo_BinaryInfo::_internal_set_main_addr_offset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  main_addr_offset_ = value;
}
inline void ReorderInfo_BinaryInfo::set_main_addr_offset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_main_addr_offset(value);
  // @@protoc_insertion_point(field_set:ShuffleInfo.ReorderInfo.BinaryInfo.main_addr_offset)
}

// optional uint32 obj_sz = 3;
inline bool ReorderInfo_BinaryInfo::_internal_has_obj_sz() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ReorderInfo_BinaryInfo::has_obj_sz() const {
  return _internal_has_obj_sz();
}
inline void ReorderInfo_BinaryInfo::clear_obj_sz() {
  obj_sz_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReorderInfo_BinaryInfo::_internal_obj_sz() const {
  return obj_sz_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReorderInfo_BinaryInfo::obj_sz() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.BinaryInfo.obj_sz)
  return _internal_obj_sz();
}
inline void ReorderInfo_BinaryInfo::_internal_set_obj_sz(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  obj_sz_ = value;
}
inline void ReorderInfo_BinaryInfo::set_obj_sz(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_obj_sz(value);
  // @@protoc_insertion_point(field_set:ShuffleInfo.ReorderInfo.BinaryInfo.obj_sz)
}

// optional uint32 src_type = 4;
inline bool ReorderInfo_BinaryInfo::_internal_has_src_type() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ReorderInfo_BinaryInfo::has_src_type() const {
  return _internal_has_src_type();
}
inline void ReorderInfo_BinaryInfo::clear_src_type() {
  src_type_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReorderInfo_BinaryInfo::_internal_src_type() const {
  return src_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReorderInfo_BinaryInfo::src_type() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.BinaryInfo.src_type)
  return _internal_src_type();
}
inline void ReorderInfo_BinaryInfo::_internal_set_src_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  src_type_ = value;
}
inline void ReorderInfo_BinaryInfo::set_src_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_src_type(value);
  // @@protoc_insertion_point(field_set:ShuffleInfo.ReorderInfo.BinaryInfo.src_type)
}

// -------------------------------------------------------------------

// ReorderInfo_LayoutInfo

// optional uint64 bb_size = 1;
inline bool ReorderInfo_LayoutInfo::_internal_has_bb_size() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ReorderInfo_LayoutInfo::has_bb_size() const {
  return _internal_has_bb_size();
}
inline void ReorderInfo_LayoutInfo::clear_bb_size() {
  bb_size_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReorderInfo_LayoutInfo::_internal_bb_size() const {
  return bb_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReorderInfo_LayoutInfo::bb_size() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.LayoutInfo.bb_size)
  return _internal_bb_size();
}
inline void ReorderInfo_LayoutInfo::_internal_set_bb_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  bb_size_ = value;
}
inline void ReorderInfo_LayoutInfo::set_bb_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_bb_size(value);
  // @@protoc_insertion_point(field_set:ShuffleInfo.ReorderInfo.LayoutInfo.bb_size)
}

// optional uint64 type = 2;
inline bool ReorderInfo_LayoutInfo::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ReorderInfo_LayoutInfo::has_type() const {
  return _internal_has_type();
}
inline void ReorderInfo_LayoutInfo::clear_type() {
  type_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReorderInfo_LayoutInfo::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReorderInfo_LayoutInfo::type() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.LayoutInfo.type)
  return _internal_type();
}
inline void ReorderInfo_LayoutInfo::_internal_set_type(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  type_ = value;
}
inline void ReorderInfo_LayoutInfo::set_type(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:ShuffleInfo.ReorderInfo.LayoutInfo.type)
}

// optional uint64 offset = 6;
inline bool ReorderInfo_LayoutInfo::_internal_has_offset() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ReorderInfo_LayoutInfo::has_offset() const {
  return _internal_has_offset();
}
inline void ReorderInfo_LayoutInfo::clear_offset() {
  offset_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReorderInfo_LayoutInfo::_internal_offset() const {
  return offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReorderInfo_LayoutInfo::offset() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.LayoutInfo.offset)
  return _internal_offset();
}
inline void ReorderInfo_LayoutInfo::_internal_set_offset(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000040u;
  offset_ = value;
}
inline void ReorderInfo_LayoutInfo::set_offset(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:ShuffleInfo.ReorderInfo.LayoutInfo.offset)
}

// optional uint32 nargs = 9;
inline bool ReorderInfo_LayoutInfo::_internal_has_nargs() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool ReorderInfo_LayoutInfo::has_nargs() const {
  return _internal_has_nargs();
}
inline void ReorderInfo_LayoutInfo::clear_nargs() {
  nargs_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReorderInfo_LayoutInfo::_internal_nargs() const {
  return nargs_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReorderInfo_LayoutInfo::nargs() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.LayoutInfo.nargs)
  return _internal_nargs();
}
inline void ReorderInfo_LayoutInfo::_internal_set_nargs(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  nargs_ = value;
}
inline void ReorderInfo_LayoutInfo::set_nargs(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_nargs(value);
  // @@protoc_insertion_point(field_set:ShuffleInfo.ReorderInfo.LayoutInfo.nargs)
}

// optional string bb_id = 10;
inline bool ReorderInfo_LayoutInfo::_internal_has_bb_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ReorderInfo_LayoutInfo::has_bb_id() const {
  return _internal_has_bb_id();
}
inline void ReorderInfo_LayoutInfo::clear_bb_id() {
  bb_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ReorderInfo_LayoutInfo::bb_id() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.LayoutInfo.bb_id)
  return _internal_bb_id();
}
inline void ReorderInfo_LayoutInfo::set_bb_id(const std::string& value) {
  _internal_set_bb_id(value);
  // @@protoc_insertion_point(field_set:ShuffleInfo.ReorderInfo.LayoutInfo.bb_id)
}
inline std::string* ReorderInfo_LayoutInfo::mutable_bb_id() {
  // @@protoc_insertion_point(field_mutable:ShuffleInfo.ReorderInfo.LayoutInfo.bb_id)
  return _internal_mutable_bb_id();
}
inline const std::string& ReorderInfo_LayoutInfo::_internal_bb_id() const {
  return bb_id_.Get();
}
inline void ReorderInfo_LayoutInfo::_internal_set_bb_id(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  bb_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ReorderInfo_LayoutInfo::set_bb_id(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  bb_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ShuffleInfo.ReorderInfo.LayoutInfo.bb_id)
}
inline void ReorderInfo_LayoutInfo::set_bb_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  bb_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ShuffleInfo.ReorderInfo.LayoutInfo.bb_id)
}
inline void ReorderInfo_LayoutInfo::set_bb_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  bb_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ShuffleInfo.ReorderInfo.LayoutInfo.bb_id)
}
inline std::string* ReorderInfo_LayoutInfo::_internal_mutable_bb_id() {
  _has_bits_[0] |= 0x00000002u;
  return bb_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ReorderInfo_LayoutInfo::release_bb_id() {
  // @@protoc_insertion_point(field_release:ShuffleInfo.ReorderInfo.LayoutInfo.bb_id)
  if (!_internal_has_bb_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return bb_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReorderInfo_LayoutInfo::set_allocated_bb_id(std::string* bb_id) {
  if (bb_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  bb_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bb_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ShuffleInfo.ReorderInfo.LayoutInfo.bb_id)
}

// repeated string succs = 11;
inline int ReorderInfo_LayoutInfo::_internal_succs_size() const {
  return succs_.size();
}
inline int ReorderInfo_LayoutInfo::succs_size() const {
  return _internal_succs_size();
}
inline void ReorderInfo_LayoutInfo::clear_succs() {
  succs_.Clear();
}
inline std::string* ReorderInfo_LayoutInfo::add_succs() {
  // @@protoc_insertion_point(field_add_mutable:ShuffleInfo.ReorderInfo.LayoutInfo.succs)
  return _internal_add_succs();
}
inline const std::string& ReorderInfo_LayoutInfo::_internal_succs(int index) const {
  return succs_.Get(index);
}
inline const std::string& ReorderInfo_LayoutInfo::succs(int index) const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.LayoutInfo.succs)
  return _internal_succs(index);
}
inline std::string* ReorderInfo_LayoutInfo::mutable_succs(int index) {
  // @@protoc_insertion_point(field_mutable:ShuffleInfo.ReorderInfo.LayoutInfo.succs)
  return succs_.Mutable(index);
}
inline void ReorderInfo_LayoutInfo::set_succs(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ShuffleInfo.ReorderInfo.LayoutInfo.succs)
  succs_.Mutable(index)->assign(value);
}
inline void ReorderInfo_LayoutInfo::set_succs(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ShuffleInfo.ReorderInfo.LayoutInfo.succs)
  succs_.Mutable(index)->assign(std::move(value));
}
inline void ReorderInfo_LayoutInfo::set_succs(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  succs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ShuffleInfo.ReorderInfo.LayoutInfo.succs)
}
inline void ReorderInfo_LayoutInfo::set_succs(int index, const char* value, size_t size) {
  succs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ShuffleInfo.ReorderInfo.LayoutInfo.succs)
}
inline std::string* ReorderInfo_LayoutInfo::_internal_add_succs() {
  return succs_.Add();
}
inline void ReorderInfo_LayoutInfo::add_succs(const std::string& value) {
  succs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ShuffleInfo.ReorderInfo.LayoutInfo.succs)
}
inline void ReorderInfo_LayoutInfo::add_succs(std::string&& value) {
  succs_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ShuffleInfo.ReorderInfo.LayoutInfo.succs)
}
inline void ReorderInfo_LayoutInfo::add_succs(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  succs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ShuffleInfo.ReorderInfo.LayoutInfo.succs)
}
inline void ReorderInfo_LayoutInfo::add_succs(const char* value, size_t size) {
  succs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ShuffleInfo.ReorderInfo.LayoutInfo.succs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ReorderInfo_LayoutInfo::succs() const {
  // @@protoc_insertion_point(field_list:ShuffleInfo.ReorderInfo.LayoutInfo.succs)
  return succs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ReorderInfo_LayoutInfo::mutable_succs() {
  // @@protoc_insertion_point(field_mutable_list:ShuffleInfo.ReorderInfo.LayoutInfo.succs)
  return &succs_;
}

// repeated string preds = 12;
inline int ReorderInfo_LayoutInfo::_internal_preds_size() const {
  return preds_.size();
}
inline int ReorderInfo_LayoutInfo::preds_size() const {
  return _internal_preds_size();
}
inline void ReorderInfo_LayoutInfo::clear_preds() {
  preds_.Clear();
}
inline std::string* ReorderInfo_LayoutInfo::add_preds() {
  // @@protoc_insertion_point(field_add_mutable:ShuffleInfo.ReorderInfo.LayoutInfo.preds)
  return _internal_add_preds();
}
inline const std::string& ReorderInfo_LayoutInfo::_internal_preds(int index) const {
  return preds_.Get(index);
}
inline const std::string& ReorderInfo_LayoutInfo::preds(int index) const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.LayoutInfo.preds)
  return _internal_preds(index);
}
inline std::string* ReorderInfo_LayoutInfo::mutable_preds(int index) {
  // @@protoc_insertion_point(field_mutable:ShuffleInfo.ReorderInfo.LayoutInfo.preds)
  return preds_.Mutable(index);
}
inline void ReorderInfo_LayoutInfo::set_preds(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ShuffleInfo.ReorderInfo.LayoutInfo.preds)
  preds_.Mutable(index)->assign(value);
}
inline void ReorderInfo_LayoutInfo::set_preds(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ShuffleInfo.ReorderInfo.LayoutInfo.preds)
  preds_.Mutable(index)->assign(std::move(value));
}
inline void ReorderInfo_LayoutInfo::set_preds(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  preds_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ShuffleInfo.ReorderInfo.LayoutInfo.preds)
}
inline void ReorderInfo_LayoutInfo::set_preds(int index, const char* value, size_t size) {
  preds_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ShuffleInfo.ReorderInfo.LayoutInfo.preds)
}
inline std::string* ReorderInfo_LayoutInfo::_internal_add_preds() {
  return preds_.Add();
}
inline void ReorderInfo_LayoutInfo::add_preds(const std::string& value) {
  preds_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ShuffleInfo.ReorderInfo.LayoutInfo.preds)
}
inline void ReorderInfo_LayoutInfo::add_preds(std::string&& value) {
  preds_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ShuffleInfo.ReorderInfo.LayoutInfo.preds)
}
inline void ReorderInfo_LayoutInfo::add_preds(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  preds_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ShuffleInfo.ReorderInfo.LayoutInfo.preds)
}
inline void ReorderInfo_LayoutInfo::add_preds(const char* value, size_t size) {
  preds_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ShuffleInfo.ReorderInfo.LayoutInfo.preds)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ReorderInfo_LayoutInfo::preds() const {
  // @@protoc_insertion_point(field_list:ShuffleInfo.ReorderInfo.LayoutInfo.preds)
  return preds_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ReorderInfo_LayoutInfo::mutable_preds() {
  // @@protoc_insertion_point(field_mutable_list:ShuffleInfo.ReorderInfo.LayoutInfo.preds)
  return &preds_;
}

// optional uint32 num_fixups = 3;
inline bool ReorderInfo_LayoutInfo::_internal_has_num_fixups() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ReorderInfo_LayoutInfo::has_num_fixups() const {
  return _internal_has_num_fixups();
}
inline void ReorderInfo_LayoutInfo::clear_num_fixups() {
  num_fixups_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReorderInfo_LayoutInfo::_internal_num_fixups() const {
  return num_fixups_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReorderInfo_LayoutInfo::num_fixups() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.LayoutInfo.num_fixups)
  return _internal_num_fixups();
}
inline void ReorderInfo_LayoutInfo::_internal_set_num_fixups(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  num_fixups_ = value;
}
inline void ReorderInfo_LayoutInfo::set_num_fixups(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_fixups(value);
  // @@protoc_insertion_point(field_set:ShuffleInfo.ReorderInfo.LayoutInfo.num_fixups)
}

// optional bool bb_fallthrough = 4;
inline bool ReorderInfo_LayoutInfo::_internal_has_bb_fallthrough() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ReorderInfo_LayoutInfo::has_bb_fallthrough() const {
  return _internal_has_bb_fallthrough();
}
inline void ReorderInfo_LayoutInfo::clear_bb_fallthrough() {
  bb_fallthrough_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool ReorderInfo_LayoutInfo::_internal_bb_fallthrough() const {
  return bb_fallthrough_;
}
inline bool ReorderInfo_LayoutInfo::bb_fallthrough() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.LayoutInfo.bb_fallthrough)
  return _internal_bb_fallthrough();
}
inline void ReorderInfo_LayoutInfo::_internal_set_bb_fallthrough(bool value) {
  _has_bits_[0] |= 0x00000020u;
  bb_fallthrough_ = value;
}
inline void ReorderInfo_LayoutInfo::set_bb_fallthrough(bool value) {
  _internal_set_bb_fallthrough(value);
  // @@protoc_insertion_point(field_set:ShuffleInfo.ReorderInfo.LayoutInfo.bb_fallthrough)
}

// optional string section_name = 5;
inline bool ReorderInfo_LayoutInfo::_internal_has_section_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ReorderInfo_LayoutInfo::has_section_name() const {
  return _internal_has_section_name();
}
inline void ReorderInfo_LayoutInfo::clear_section_name() {
  section_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ReorderInfo_LayoutInfo::section_name() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.LayoutInfo.section_name)
  return _internal_section_name();
}
inline void ReorderInfo_LayoutInfo::set_section_name(const std::string& value) {
  _internal_set_section_name(value);
  // @@protoc_insertion_point(field_set:ShuffleInfo.ReorderInfo.LayoutInfo.section_name)
}
inline std::string* ReorderInfo_LayoutInfo::mutable_section_name() {
  // @@protoc_insertion_point(field_mutable:ShuffleInfo.ReorderInfo.LayoutInfo.section_name)
  return _internal_mutable_section_name();
}
inline const std::string& ReorderInfo_LayoutInfo::_internal_section_name() const {
  return section_name_.Get();
}
inline void ReorderInfo_LayoutInfo::_internal_set_section_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  section_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ReorderInfo_LayoutInfo::set_section_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  section_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ShuffleInfo.ReorderInfo.LayoutInfo.section_name)
}
inline void ReorderInfo_LayoutInfo::set_section_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  section_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ShuffleInfo.ReorderInfo.LayoutInfo.section_name)
}
inline void ReorderInfo_LayoutInfo::set_section_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  section_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ShuffleInfo.ReorderInfo.LayoutInfo.section_name)
}
inline std::string* ReorderInfo_LayoutInfo::_internal_mutable_section_name() {
  _has_bits_[0] |= 0x00000001u;
  return section_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ReorderInfo_LayoutInfo::release_section_name() {
  // @@protoc_insertion_point(field_release:ShuffleInfo.ReorderInfo.LayoutInfo.section_name)
  if (!_internal_has_section_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return section_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReorderInfo_LayoutInfo::set_allocated_section_name(std::string* section_name) {
  if (section_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  section_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), section_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ShuffleInfo.ReorderInfo.LayoutInfo.section_name)
}

// optional uint32 padding_size = 7;
inline bool ReorderInfo_LayoutInfo::_internal_has_padding_size() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ReorderInfo_LayoutInfo::has_padding_size() const {
  return _internal_has_padding_size();
}
inline void ReorderInfo_LayoutInfo::clear_padding_size() {
  padding_size_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReorderInfo_LayoutInfo::_internal_padding_size() const {
  return padding_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReorderInfo_LayoutInfo::padding_size() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.LayoutInfo.padding_size)
  return _internal_padding_size();
}
inline void ReorderInfo_LayoutInfo::_internal_set_padding_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  padding_size_ = value;
}
inline void ReorderInfo_LayoutInfo::set_padding_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_padding_size(value);
  // @@protoc_insertion_point(field_set:ShuffleInfo.ReorderInfo.LayoutInfo.padding_size)
}

// optional uint32 assemble_type = 8 [default = 0];
inline bool ReorderInfo_LayoutInfo::_internal_has_assemble_type() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool ReorderInfo_LayoutInfo::has_assemble_type() const {
  return _internal_has_assemble_type();
}
inline void ReorderInfo_LayoutInfo::clear_assemble_type() {
  assemble_type_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReorderInfo_LayoutInfo::_internal_assemble_type() const {
  return assemble_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReorderInfo_LayoutInfo::assemble_type() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.LayoutInfo.assemble_type)
  return _internal_assemble_type();
}
inline void ReorderInfo_LayoutInfo::_internal_set_assemble_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  assemble_type_ = value;
}
inline void ReorderInfo_LayoutInfo::set_assemble_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_assemble_type(value);
  // @@protoc_insertion_point(field_set:ShuffleInfo.ReorderInfo.LayoutInfo.assemble_type)
}

// -------------------------------------------------------------------

// ReorderInfo_FunctionInfo

// optional string f_id = 1;
inline bool ReorderInfo_FunctionInfo::_internal_has_f_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ReorderInfo_FunctionInfo::has_f_id() const {
  return _internal_has_f_id();
}
inline void ReorderInfo_FunctionInfo::clear_f_id() {
  f_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ReorderInfo_FunctionInfo::f_id() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.FunctionInfo.f_id)
  return _internal_f_id();
}
inline void ReorderInfo_FunctionInfo::set_f_id(const std::string& value) {
  _internal_set_f_id(value);
  // @@protoc_insertion_point(field_set:ShuffleInfo.ReorderInfo.FunctionInfo.f_id)
}
inline std::string* ReorderInfo_FunctionInfo::mutable_f_id() {
  // @@protoc_insertion_point(field_mutable:ShuffleInfo.ReorderInfo.FunctionInfo.f_id)
  return _internal_mutable_f_id();
}
inline const std::string& ReorderInfo_FunctionInfo::_internal_f_id() const {
  return f_id_.Get();
}
inline void ReorderInfo_FunctionInfo::_internal_set_f_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  f_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ReorderInfo_FunctionInfo::set_f_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  f_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ShuffleInfo.ReorderInfo.FunctionInfo.f_id)
}
inline void ReorderInfo_FunctionInfo::set_f_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  f_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ShuffleInfo.ReorderInfo.FunctionInfo.f_id)
}
inline void ReorderInfo_FunctionInfo::set_f_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  f_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ShuffleInfo.ReorderInfo.FunctionInfo.f_id)
}
inline std::string* ReorderInfo_FunctionInfo::_internal_mutable_f_id() {
  _has_bits_[0] |= 0x00000001u;
  return f_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ReorderInfo_FunctionInfo::release_f_id() {
  // @@protoc_insertion_point(field_release:ShuffleInfo.ReorderInfo.FunctionInfo.f_id)
  if (!_internal_has_f_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return f_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReorderInfo_FunctionInfo::set_allocated_f_id(std::string* f_id) {
  if (f_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  f_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ShuffleInfo.ReorderInfo.FunctionInfo.f_id)
}

// optional string f_name = 2;
inline bool ReorderInfo_FunctionInfo::_internal_has_f_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ReorderInfo_FunctionInfo::has_f_name() const {
  return _internal_has_f_name();
}
inline void ReorderInfo_FunctionInfo::clear_f_name() {
  f_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ReorderInfo_FunctionInfo::f_name() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.FunctionInfo.f_name)
  return _internal_f_name();
}
inline void ReorderInfo_FunctionInfo::set_f_name(const std::string& value) {
  _internal_set_f_name(value);
  // @@protoc_insertion_point(field_set:ShuffleInfo.ReorderInfo.FunctionInfo.f_name)
}
inline std::string* ReorderInfo_FunctionInfo::mutable_f_name() {
  // @@protoc_insertion_point(field_mutable:ShuffleInfo.ReorderInfo.FunctionInfo.f_name)
  return _internal_mutable_f_name();
}
inline const std::string& ReorderInfo_FunctionInfo::_internal_f_name() const {
  return f_name_.Get();
}
inline void ReorderInfo_FunctionInfo::_internal_set_f_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  f_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ReorderInfo_FunctionInfo::set_f_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  f_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ShuffleInfo.ReorderInfo.FunctionInfo.f_name)
}
inline void ReorderInfo_FunctionInfo::set_f_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  f_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ShuffleInfo.ReorderInfo.FunctionInfo.f_name)
}
inline void ReorderInfo_FunctionInfo::set_f_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  f_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ShuffleInfo.ReorderInfo.FunctionInfo.f_name)
}
inline std::string* ReorderInfo_FunctionInfo::_internal_mutable_f_name() {
  _has_bits_[0] |= 0x00000002u;
  return f_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ReorderInfo_FunctionInfo::release_f_name() {
  // @@protoc_insertion_point(field_release:ShuffleInfo.ReorderInfo.FunctionInfo.f_name)
  if (!_internal_has_f_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return f_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReorderInfo_FunctionInfo::set_allocated_f_name(std::string* f_name) {
  if (f_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ShuffleInfo.ReorderInfo.FunctionInfo.f_name)
}

// optional uint64 bb_num = 3;
inline bool ReorderInfo_FunctionInfo::_internal_has_bb_num() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ReorderInfo_FunctionInfo::has_bb_num() const {
  return _internal_has_bb_num();
}
inline void ReorderInfo_FunctionInfo::clear_bb_num() {
  bb_num_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReorderInfo_FunctionInfo::_internal_bb_num() const {
  return bb_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReorderInfo_FunctionInfo::bb_num() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.FunctionInfo.bb_num)
  return _internal_bb_num();
}
inline void ReorderInfo_FunctionInfo::_internal_set_bb_num(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  bb_num_ = value;
}
inline void ReorderInfo_FunctionInfo::set_bb_num(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_bb_num(value);
  // @@protoc_insertion_point(field_set:ShuffleInfo.ReorderInfo.FunctionInfo.bb_num)
}

// -------------------------------------------------------------------

// ReorderInfo_FixupInfo_FixupTuple

// required uint32 offset = 1;
inline bool ReorderInfo_FixupInfo_FixupTuple::_internal_has_offset() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ReorderInfo_FixupInfo_FixupTuple::has_offset() const {
  return _internal_has_offset();
}
inline void ReorderInfo_FixupInfo_FixupTuple::clear_offset() {
  offset_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReorderInfo_FixupInfo_FixupTuple::_internal_offset() const {
  return offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReorderInfo_FixupInfo_FixupTuple::offset() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.offset)
  return _internal_offset();
}
inline void ReorderInfo_FixupInfo_FixupTuple::_internal_set_offset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  offset_ = value;
}
inline void ReorderInfo_FixupInfo_FixupTuple::set_offset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.offset)
}

// required uint32 deref_sz = 2;
inline bool ReorderInfo_FixupInfo_FixupTuple::_internal_has_deref_sz() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ReorderInfo_FixupInfo_FixupTuple::has_deref_sz() const {
  return _internal_has_deref_sz();
}
inline void ReorderInfo_FixupInfo_FixupTuple::clear_deref_sz() {
  deref_sz_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReorderInfo_FixupInfo_FixupTuple::_internal_deref_sz() const {
  return deref_sz_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReorderInfo_FixupInfo_FixupTuple::deref_sz() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.deref_sz)
  return _internal_deref_sz();
}
inline void ReorderInfo_FixupInfo_FixupTuple::_internal_set_deref_sz(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  deref_sz_ = value;
}
inline void ReorderInfo_FixupInfo_FixupTuple::set_deref_sz(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_deref_sz(value);
  // @@protoc_insertion_point(field_set:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.deref_sz)
}

// required bool is_rela = 3;
inline bool ReorderInfo_FixupInfo_FixupTuple::_internal_has_is_rela() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ReorderInfo_FixupInfo_FixupTuple::has_is_rela() const {
  return _internal_has_is_rela();
}
inline void ReorderInfo_FixupInfo_FixupTuple::clear_is_rela() {
  is_rela_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool ReorderInfo_FixupInfo_FixupTuple::_internal_is_rela() const {
  return is_rela_;
}
inline bool ReorderInfo_FixupInfo_FixupTuple::is_rela() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.is_rela)
  return _internal_is_rela();
}
inline void ReorderInfo_FixupInfo_FixupTuple::_internal_set_is_rela(bool value) {
  _has_bits_[0] |= 0x00000008u;
  is_rela_ = value;
}
inline void ReorderInfo_FixupInfo_FixupTuple::set_is_rela(bool value) {
  _internal_set_is_rela(value);
  // @@protoc_insertion_point(field_set:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.is_rela)
}

// optional uint32 type = 4;
inline bool ReorderInfo_FixupInfo_FixupTuple::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ReorderInfo_FixupInfo_FixupTuple::has_type() const {
  return _internal_has_type();
}
inline void ReorderInfo_FixupInfo_FixupTuple::clear_type() {
  type_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReorderInfo_FixupInfo_FixupTuple::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReorderInfo_FixupInfo_FixupTuple::type() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.type)
  return _internal_type();
}
inline void ReorderInfo_FixupInfo_FixupTuple::_internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  type_ = value;
}
inline void ReorderInfo_FixupInfo_FixupTuple::set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.type)
}

// optional string section_name = 5;
inline bool ReorderInfo_FixupInfo_FixupTuple::_internal_has_section_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ReorderInfo_FixupInfo_FixupTuple::has_section_name() const {
  return _internal_has_section_name();
}
inline void ReorderInfo_FixupInfo_FixupTuple::clear_section_name() {
  section_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ReorderInfo_FixupInfo_FixupTuple::section_name() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.section_name)
  return _internal_section_name();
}
inline void ReorderInfo_FixupInfo_FixupTuple::set_section_name(const std::string& value) {
  _internal_set_section_name(value);
  // @@protoc_insertion_point(field_set:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.section_name)
}
inline std::string* ReorderInfo_FixupInfo_FixupTuple::mutable_section_name() {
  // @@protoc_insertion_point(field_mutable:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.section_name)
  return _internal_mutable_section_name();
}
inline const std::string& ReorderInfo_FixupInfo_FixupTuple::_internal_section_name() const {
  return section_name_.Get();
}
inline void ReorderInfo_FixupInfo_FixupTuple::_internal_set_section_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  section_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ReorderInfo_FixupInfo_FixupTuple::set_section_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  section_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.section_name)
}
inline void ReorderInfo_FixupInfo_FixupTuple::set_section_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  section_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.section_name)
}
inline void ReorderInfo_FixupInfo_FixupTuple::set_section_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  section_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.section_name)
}
inline std::string* ReorderInfo_FixupInfo_FixupTuple::_internal_mutable_section_name() {
  _has_bits_[0] |= 0x00000001u;
  return section_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ReorderInfo_FixupInfo_FixupTuple::release_section_name() {
  // @@protoc_insertion_point(field_release:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.section_name)
  if (!_internal_has_section_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return section_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReorderInfo_FixupInfo_FixupTuple::set_allocated_section_name(std::string* section_name) {
  if (section_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  section_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), section_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.section_name)
}

// optional uint32 num_jt_entries = 6;
inline bool ReorderInfo_FixupInfo_FixupTuple::_internal_has_num_jt_entries() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ReorderInfo_FixupInfo_FixupTuple::has_num_jt_entries() const {
  return _internal_has_num_jt_entries();
}
inline void ReorderInfo_FixupInfo_FixupTuple::clear_num_jt_entries() {
  num_jt_entries_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReorderInfo_FixupInfo_FixupTuple::_internal_num_jt_entries() const {
  return num_jt_entries_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReorderInfo_FixupInfo_FixupTuple::num_jt_entries() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.num_jt_entries)
  return _internal_num_jt_entries();
}
inline void ReorderInfo_FixupInfo_FixupTuple::_internal_set_num_jt_entries(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  num_jt_entries_ = value;
}
inline void ReorderInfo_FixupInfo_FixupTuple::set_num_jt_entries(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_jt_entries(value);
  // @@protoc_insertion_point(field_set:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.num_jt_entries)
}

// optional uint32 jt_entry_sz = 7;
inline bool ReorderInfo_FixupInfo_FixupTuple::_internal_has_jt_entry_sz() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ReorderInfo_FixupInfo_FixupTuple::has_jt_entry_sz() const {
  return _internal_has_jt_entry_sz();
}
inline void ReorderInfo_FixupInfo_FixupTuple::clear_jt_entry_sz() {
  jt_entry_sz_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReorderInfo_FixupInfo_FixupTuple::_internal_jt_entry_sz() const {
  return jt_entry_sz_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReorderInfo_FixupInfo_FixupTuple::jt_entry_sz() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.jt_entry_sz)
  return _internal_jt_entry_sz();
}
inline void ReorderInfo_FixupInfo_FixupTuple::_internal_set_jt_entry_sz(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  jt_entry_sz_ = value;
}
inline void ReorderInfo_FixupInfo_FixupTuple::set_jt_entry_sz(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_jt_entry_sz(value);
  // @@protoc_insertion_point(field_set:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.jt_entry_sz)
}

// -------------------------------------------------------------------

// ReorderInfo_FixupInfo

// repeated .ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple text = 1;
inline int ReorderInfo_FixupInfo::_internal_text_size() const {
  return text_.size();
}
inline int ReorderInfo_FixupInfo::text_size() const {
  return _internal_text_size();
}
inline void ReorderInfo_FixupInfo::clear_text() {
  text_.Clear();
}
inline ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* ReorderInfo_FixupInfo::mutable_text(int index) {
  // @@protoc_insertion_point(field_mutable:ShuffleInfo.ReorderInfo.FixupInfo.text)
  return text_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple >*
ReorderInfo_FixupInfo::mutable_text() {
  // @@protoc_insertion_point(field_mutable_list:ShuffleInfo.ReorderInfo.FixupInfo.text)
  return &text_;
}
inline const ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple& ReorderInfo_FixupInfo::_internal_text(int index) const {
  return text_.Get(index);
}
inline const ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple& ReorderInfo_FixupInfo::text(int index) const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.FixupInfo.text)
  return _internal_text(index);
}
inline ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* ReorderInfo_FixupInfo::_internal_add_text() {
  return text_.Add();
}
inline ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* ReorderInfo_FixupInfo::add_text() {
  // @@protoc_insertion_point(field_add:ShuffleInfo.ReorderInfo.FixupInfo.text)
  return _internal_add_text();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple >&
ReorderInfo_FixupInfo::text() const {
  // @@protoc_insertion_point(field_list:ShuffleInfo.ReorderInfo.FixupInfo.text)
  return text_;
}

// repeated .ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple rodata = 2;
inline int ReorderInfo_FixupInfo::_internal_rodata_size() const {
  return rodata_.size();
}
inline int ReorderInfo_FixupInfo::rodata_size() const {
  return _internal_rodata_size();
}
inline void ReorderInfo_FixupInfo::clear_rodata() {
  rodata_.Clear();
}
inline ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* ReorderInfo_FixupInfo::mutable_rodata(int index) {
  // @@protoc_insertion_point(field_mutable:ShuffleInfo.ReorderInfo.FixupInfo.rodata)
  return rodata_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple >*
ReorderInfo_FixupInfo::mutable_rodata() {
  // @@protoc_insertion_point(field_mutable_list:ShuffleInfo.ReorderInfo.FixupInfo.rodata)
  return &rodata_;
}
inline const ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple& ReorderInfo_FixupInfo::_internal_rodata(int index) const {
  return rodata_.Get(index);
}
inline const ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple& ReorderInfo_FixupInfo::rodata(int index) const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.FixupInfo.rodata)
  return _internal_rodata(index);
}
inline ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* ReorderInfo_FixupInfo::_internal_add_rodata() {
  return rodata_.Add();
}
inline ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* ReorderInfo_FixupInfo::add_rodata() {
  // @@protoc_insertion_point(field_add:ShuffleInfo.ReorderInfo.FixupInfo.rodata)
  return _internal_add_rodata();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple >&
ReorderInfo_FixupInfo::rodata() const {
  // @@protoc_insertion_point(field_list:ShuffleInfo.ReorderInfo.FixupInfo.rodata)
  return rodata_;
}

// repeated .ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple data = 3;
inline int ReorderInfo_FixupInfo::_internal_data_size() const {
  return data_.size();
}
inline int ReorderInfo_FixupInfo::data_size() const {
  return _internal_data_size();
}
inline void ReorderInfo_FixupInfo::clear_data() {
  data_.Clear();
}
inline ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* ReorderInfo_FixupInfo::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:ShuffleInfo.ReorderInfo.FixupInfo.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple >*
ReorderInfo_FixupInfo::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:ShuffleInfo.ReorderInfo.FixupInfo.data)
  return &data_;
}
inline const ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple& ReorderInfo_FixupInfo::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple& ReorderInfo_FixupInfo::data(int index) const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.FixupInfo.data)
  return _internal_data(index);
}
inline ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* ReorderInfo_FixupInfo::_internal_add_data() {
  return data_.Add();
}
inline ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* ReorderInfo_FixupInfo::add_data() {
  // @@protoc_insertion_point(field_add:ShuffleInfo.ReorderInfo.FixupInfo.data)
  return _internal_add_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple >&
ReorderInfo_FixupInfo::data() const {
  // @@protoc_insertion_point(field_list:ShuffleInfo.ReorderInfo.FixupInfo.data)
  return data_;
}

// repeated .ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple datarel = 4;
inline int ReorderInfo_FixupInfo::_internal_datarel_size() const {
  return datarel_.size();
}
inline int ReorderInfo_FixupInfo::datarel_size() const {
  return _internal_datarel_size();
}
inline void ReorderInfo_FixupInfo::clear_datarel() {
  datarel_.Clear();
}
inline ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* ReorderInfo_FixupInfo::mutable_datarel(int index) {
  // @@protoc_insertion_point(field_mutable:ShuffleInfo.ReorderInfo.FixupInfo.datarel)
  return datarel_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple >*
ReorderInfo_FixupInfo::mutable_datarel() {
  // @@protoc_insertion_point(field_mutable_list:ShuffleInfo.ReorderInfo.FixupInfo.datarel)
  return &datarel_;
}
inline const ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple& ReorderInfo_FixupInfo::_internal_datarel(int index) const {
  return datarel_.Get(index);
}
inline const ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple& ReorderInfo_FixupInfo::datarel(int index) const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.FixupInfo.datarel)
  return _internal_datarel(index);
}
inline ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* ReorderInfo_FixupInfo::_internal_add_datarel() {
  return datarel_.Add();
}
inline ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* ReorderInfo_FixupInfo::add_datarel() {
  // @@protoc_insertion_point(field_add:ShuffleInfo.ReorderInfo.FixupInfo.datarel)
  return _internal_add_datarel();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple >&
ReorderInfo_FixupInfo::datarel() const {
  // @@protoc_insertion_point(field_list:ShuffleInfo.ReorderInfo.FixupInfo.datarel)
  return datarel_;
}

// repeated .ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple initarray = 5;
inline int ReorderInfo_FixupInfo::_internal_initarray_size() const {
  return initarray_.size();
}
inline int ReorderInfo_FixupInfo::initarray_size() const {
  return _internal_initarray_size();
}
inline void ReorderInfo_FixupInfo::clear_initarray() {
  initarray_.Clear();
}
inline ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* ReorderInfo_FixupInfo::mutable_initarray(int index) {
  // @@protoc_insertion_point(field_mutable:ShuffleInfo.ReorderInfo.FixupInfo.initarray)
  return initarray_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple >*
ReorderInfo_FixupInfo::mutable_initarray() {
  // @@protoc_insertion_point(field_mutable_list:ShuffleInfo.ReorderInfo.FixupInfo.initarray)
  return &initarray_;
}
inline const ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple& ReorderInfo_FixupInfo::_internal_initarray(int index) const {
  return initarray_.Get(index);
}
inline const ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple& ReorderInfo_FixupInfo::initarray(int index) const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.FixupInfo.initarray)
  return _internal_initarray(index);
}
inline ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* ReorderInfo_FixupInfo::_internal_add_initarray() {
  return initarray_.Add();
}
inline ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* ReorderInfo_FixupInfo::add_initarray() {
  // @@protoc_insertion_point(field_add:ShuffleInfo.ReorderInfo.FixupInfo.initarray)
  return _internal_add_initarray();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple >&
ReorderInfo_FixupInfo::initarray() const {
  // @@protoc_insertion_point(field_list:ShuffleInfo.ReorderInfo.FixupInfo.initarray)
  return initarray_;
}

// -------------------------------------------------------------------

// ReorderInfo_SourceInfo

// repeated uint32 src_type = 1;
inline int ReorderInfo_SourceInfo::_internal_src_type_size() const {
  return src_type_.size();
}
inline int ReorderInfo_SourceInfo::src_type_size() const {
  return _internal_src_type_size();
}
inline void ReorderInfo_SourceInfo::clear_src_type() {
  src_type_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReorderInfo_SourceInfo::_internal_src_type(int index) const {
  return src_type_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReorderInfo_SourceInfo::src_type(int index) const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.SourceInfo.src_type)
  return _internal_src_type(index);
}
inline void ReorderInfo_SourceInfo::set_src_type(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  src_type_.Set(index, value);
  // @@protoc_insertion_point(field_set:ShuffleInfo.ReorderInfo.SourceInfo.src_type)
}
inline void ReorderInfo_SourceInfo::_internal_add_src_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  src_type_.Add(value);
}
inline void ReorderInfo_SourceInfo::add_src_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_src_type(value);
  // @@protoc_insertion_point(field_add:ShuffleInfo.ReorderInfo.SourceInfo.src_type)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
ReorderInfo_SourceInfo::_internal_src_type() const {
  return src_type_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
ReorderInfo_SourceInfo::src_type() const {
  // @@protoc_insertion_point(field_list:ShuffleInfo.ReorderInfo.SourceInfo.src_type)
  return _internal_src_type();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
ReorderInfo_SourceInfo::_internal_mutable_src_type() {
  return &src_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
ReorderInfo_SourceInfo::mutable_src_type() {
  // @@protoc_insertion_point(field_mutable_list:ShuffleInfo.ReorderInfo.SourceInfo.src_type)
  return _internal_mutable_src_type();
}

// -------------------------------------------------------------------

// ReorderInfo

// optional .ShuffleInfo.ReorderInfo.BinaryInfo bin = 1;
inline bool ReorderInfo::_internal_has_bin() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || bin_ != nullptr);
  return value;
}
inline bool ReorderInfo::has_bin() const {
  return _internal_has_bin();
}
inline void ReorderInfo::clear_bin() {
  if (bin_ != nullptr) bin_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::ShuffleInfo::ReorderInfo_BinaryInfo& ReorderInfo::_internal_bin() const {
  const ::ShuffleInfo::ReorderInfo_BinaryInfo* p = bin_;
  return p != nullptr ? *p : reinterpret_cast<const ::ShuffleInfo::ReorderInfo_BinaryInfo&>(
      ::ShuffleInfo::_ReorderInfo_BinaryInfo_default_instance_);
}
inline const ::ShuffleInfo::ReorderInfo_BinaryInfo& ReorderInfo::bin() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.bin)
  return _internal_bin();
}
inline void ReorderInfo::unsafe_arena_set_allocated_bin(
    ::ShuffleInfo::ReorderInfo_BinaryInfo* bin) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bin_);
  }
  bin_ = bin;
  if (bin) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ShuffleInfo.ReorderInfo.bin)
}
inline ::ShuffleInfo::ReorderInfo_BinaryInfo* ReorderInfo::release_bin() {
  _has_bits_[0] &= ~0x00000001u;
  ::ShuffleInfo::ReorderInfo_BinaryInfo* temp = bin_;
  bin_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ShuffleInfo::ReorderInfo_BinaryInfo* ReorderInfo::unsafe_arena_release_bin() {
  // @@protoc_insertion_point(field_release:ShuffleInfo.ReorderInfo.bin)
  _has_bits_[0] &= ~0x00000001u;
  ::ShuffleInfo::ReorderInfo_BinaryInfo* temp = bin_;
  bin_ = nullptr;
  return temp;
}
inline ::ShuffleInfo::ReorderInfo_BinaryInfo* ReorderInfo::_internal_mutable_bin() {
  _has_bits_[0] |= 0x00000001u;
  if (bin_ == nullptr) {
    auto* p = CreateMaybeMessage<::ShuffleInfo::ReorderInfo_BinaryInfo>(GetArena());
    bin_ = p;
  }
  return bin_;
}
inline ::ShuffleInfo::ReorderInfo_BinaryInfo* ReorderInfo::mutable_bin() {
  // @@protoc_insertion_point(field_mutable:ShuffleInfo.ReorderInfo.bin)
  return _internal_mutable_bin();
}
inline void ReorderInfo::set_allocated_bin(::ShuffleInfo::ReorderInfo_BinaryInfo* bin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete bin_;
  }
  if (bin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(bin);
    if (message_arena != submessage_arena) {
      bin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bin, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  bin_ = bin;
  // @@protoc_insertion_point(field_set_allocated:ShuffleInfo.ReorderInfo.bin)
}

// repeated .ShuffleInfo.ReorderInfo.FunctionInfo func = 5;
inline int ReorderInfo::_internal_func_size() const {
  return func_.size();
}
inline int ReorderInfo::func_size() const {
  return _internal_func_size();
}
inline void ReorderInfo::clear_func() {
  func_.Clear();
}
inline ::ShuffleInfo::ReorderInfo_FunctionInfo* ReorderInfo::mutable_func(int index) {
  // @@protoc_insertion_point(field_mutable:ShuffleInfo.ReorderInfo.func)
  return func_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FunctionInfo >*
ReorderInfo::mutable_func() {
  // @@protoc_insertion_point(field_mutable_list:ShuffleInfo.ReorderInfo.func)
  return &func_;
}
inline const ::ShuffleInfo::ReorderInfo_FunctionInfo& ReorderInfo::_internal_func(int index) const {
  return func_.Get(index);
}
inline const ::ShuffleInfo::ReorderInfo_FunctionInfo& ReorderInfo::func(int index) const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.func)
  return _internal_func(index);
}
inline ::ShuffleInfo::ReorderInfo_FunctionInfo* ReorderInfo::_internal_add_func() {
  return func_.Add();
}
inline ::ShuffleInfo::ReorderInfo_FunctionInfo* ReorderInfo::add_func() {
  // @@protoc_insertion_point(field_add:ShuffleInfo.ReorderInfo.func)
  return _internal_add_func();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FunctionInfo >&
ReorderInfo::func() const {
  // @@protoc_insertion_point(field_list:ShuffleInfo.ReorderInfo.func)
  return func_;
}

// repeated .ShuffleInfo.ReorderInfo.LayoutInfo layout = 2;
inline int ReorderInfo::_internal_layout_size() const {
  return layout_.size();
}
inline int ReorderInfo::layout_size() const {
  return _internal_layout_size();
}
inline void ReorderInfo::clear_layout() {
  layout_.Clear();
}
inline ::ShuffleInfo::ReorderInfo_LayoutInfo* ReorderInfo::mutable_layout(int index) {
  // @@protoc_insertion_point(field_mutable:ShuffleInfo.ReorderInfo.layout)
  return layout_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_LayoutInfo >*
ReorderInfo::mutable_layout() {
  // @@protoc_insertion_point(field_mutable_list:ShuffleInfo.ReorderInfo.layout)
  return &layout_;
}
inline const ::ShuffleInfo::ReorderInfo_LayoutInfo& ReorderInfo::_internal_layout(int index) const {
  return layout_.Get(index);
}
inline const ::ShuffleInfo::ReorderInfo_LayoutInfo& ReorderInfo::layout(int index) const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.layout)
  return _internal_layout(index);
}
inline ::ShuffleInfo::ReorderInfo_LayoutInfo* ReorderInfo::_internal_add_layout() {
  return layout_.Add();
}
inline ::ShuffleInfo::ReorderInfo_LayoutInfo* ReorderInfo::add_layout() {
  // @@protoc_insertion_point(field_add:ShuffleInfo.ReorderInfo.layout)
  return _internal_add_layout();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_LayoutInfo >&
ReorderInfo::layout() const {
  // @@protoc_insertion_point(field_list:ShuffleInfo.ReorderInfo.layout)
  return layout_;
}

// repeated .ShuffleInfo.ReorderInfo.FixupInfo fixup = 3;
inline int ReorderInfo::_internal_fixup_size() const {
  return fixup_.size();
}
inline int ReorderInfo::fixup_size() const {
  return _internal_fixup_size();
}
inline void ReorderInfo::clear_fixup() {
  fixup_.Clear();
}
inline ::ShuffleInfo::ReorderInfo_FixupInfo* ReorderInfo::mutable_fixup(int index) {
  // @@protoc_insertion_point(field_mutable:ShuffleInfo.ReorderInfo.fixup)
  return fixup_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo >*
ReorderInfo::mutable_fixup() {
  // @@protoc_insertion_point(field_mutable_list:ShuffleInfo.ReorderInfo.fixup)
  return &fixup_;
}
inline const ::ShuffleInfo::ReorderInfo_FixupInfo& ReorderInfo::_internal_fixup(int index) const {
  return fixup_.Get(index);
}
inline const ::ShuffleInfo::ReorderInfo_FixupInfo& ReorderInfo::fixup(int index) const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.fixup)
  return _internal_fixup(index);
}
inline ::ShuffleInfo::ReorderInfo_FixupInfo* ReorderInfo::_internal_add_fixup() {
  return fixup_.Add();
}
inline ::ShuffleInfo::ReorderInfo_FixupInfo* ReorderInfo::add_fixup() {
  // @@protoc_insertion_point(field_add:ShuffleInfo.ReorderInfo.fixup)
  return _internal_add_fixup();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo >&
ReorderInfo::fixup() const {
  // @@protoc_insertion_point(field_list:ShuffleInfo.ReorderInfo.fixup)
  return fixup_;
}

// optional .ShuffleInfo.ReorderInfo.SourceInfo source = 4;
inline bool ReorderInfo::_internal_has_source() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || source_ != nullptr);
  return value;
}
inline bool ReorderInfo::has_source() const {
  return _internal_has_source();
}
inline void ReorderInfo::clear_source() {
  if (source_ != nullptr) source_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::ShuffleInfo::ReorderInfo_SourceInfo& ReorderInfo::_internal_source() const {
  const ::ShuffleInfo::ReorderInfo_SourceInfo* p = source_;
  return p != nullptr ? *p : reinterpret_cast<const ::ShuffleInfo::ReorderInfo_SourceInfo&>(
      ::ShuffleInfo::_ReorderInfo_SourceInfo_default_instance_);
}
inline const ::ShuffleInfo::ReorderInfo_SourceInfo& ReorderInfo::source() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.source)
  return _internal_source();
}
inline void ReorderInfo::unsafe_arena_set_allocated_source(
    ::ShuffleInfo::ReorderInfo_SourceInfo* source) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(source_);
  }
  source_ = source;
  if (source) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ShuffleInfo.ReorderInfo.source)
}
inline ::ShuffleInfo::ReorderInfo_SourceInfo* ReorderInfo::release_source() {
  _has_bits_[0] &= ~0x00000002u;
  ::ShuffleInfo::ReorderInfo_SourceInfo* temp = source_;
  source_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ShuffleInfo::ReorderInfo_SourceInfo* ReorderInfo::unsafe_arena_release_source() {
  // @@protoc_insertion_point(field_release:ShuffleInfo.ReorderInfo.source)
  _has_bits_[0] &= ~0x00000002u;
  ::ShuffleInfo::ReorderInfo_SourceInfo* temp = source_;
  source_ = nullptr;
  return temp;
}
inline ::ShuffleInfo::ReorderInfo_SourceInfo* ReorderInfo::_internal_mutable_source() {
  _has_bits_[0] |= 0x00000002u;
  if (source_ == nullptr) {
    auto* p = CreateMaybeMessage<::ShuffleInfo::ReorderInfo_SourceInfo>(GetArena());
    source_ = p;
  }
  return source_;
}
inline ::ShuffleInfo::ReorderInfo_SourceInfo* ReorderInfo::mutable_source() {
  // @@protoc_insertion_point(field_mutable:ShuffleInfo.ReorderInfo.source)
  return _internal_mutable_source();
}
inline void ReorderInfo::set_allocated_source(::ShuffleInfo::ReorderInfo_SourceInfo* source) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete source_;
  }
  if (source) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(source);
    if (message_arena != submessage_arena) {
      source = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, source, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  source_ = source;
  // @@protoc_insertion_point(field_set_allocated:ShuffleInfo.ReorderInfo.source)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ShuffleInfo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_shuffleInfo_2eproto
